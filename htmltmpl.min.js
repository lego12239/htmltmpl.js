/* Version 0.4.0 , for copyright see LICENSE file */
  {  "use strict";   function htmltmpl(tmpl, prms) {  this.p = {};  this.err_msg = "";  this.data = [];  this.match = {};  this.tmpl = { data: [],  data_cur: undefined,  str: undefined,  pos: { cur: 0,  start: 0 } };  this.priv = [];    this.phrases = [[ { phrase: "<%TMPL_VAR ",  is_match: 1,  oref: this,  hdlr_1_2: this.hdlr_tmpl_var_1_2 },  { phrase: "&lt;%TMPL_VAR ",  is_match: 1,  oref: this,  hdlr_1_2: this.hdlr_tmpl_var_1_2 },  { phrase: "&LT;%TMPL_VAR ",  is_match: 1,  oref: this,  hdlr_1_2: this.hdlr_tmpl_var_1_2 },  { phrase: "<!--%TMPL_VAR ",  is_match: 1,  oref: this,  hdlr_1_2: this.hdlr_tmpl_var_1_2 },  { phrase: "<%TMPL_LOOP ",  is_match: 1,  oref: this,  hdlr_1_2: this.hdlr_tmpl_loop_1_2 },  { phrase: "&lt;%TMPL_LOOP ",  is_match: 1,  oref: this,  hdlr_1_2: this.hdlr_tmpl_loop_1_2 },  { phrase: "&LT;%TMPL_LOOP ",  is_match: 1,  oref: this,  hdlr_1_2: this.hdlr_tmpl_loop_1_2 },  { phrase: "<!--%TMPL_LOOP ",  is_match: 1,  oref: this,  hdlr_1_2: this.hdlr_tmpl_loop_1_2 },  { phrase: "<%/TMPL_LOOP%>",  is_match: 1,  oref: this,  hdlr_1_2: this.hdlr_tmpl_loop_1_2_end },  { phrase: "&lt;%/TMPL_LOOP%&gt;",  is_match: 1,  oref: this,  hdlr_1_2: this.hdlr_tmpl_loop_1_2_end },  { phrase: "&LT;%/TMPL_LOOP%&GT;",  is_match: 1,  oref: this,  hdlr_1_2: this.hdlr_tmpl_loop_1_2_end },  { phrase: "<!--%/TMPL_LOOP%-->",  is_match: 1,  oref: this,  hdlr_1_2: this.hdlr_tmpl_loop_1_2_end },  { phrase: "<%TMPL_IF ",  is_match: 1,  oref: this,  hdlr_1_2: this.hdlr_tmpl_if_1_2 },  { phrase: "&lt;%TMPL_IF ",  is_match: 1,  oref: this,  hdlr_1_2: this.hdlr_tmpl_if_1_2 },  { phrase: "&LT;%TMPL_IF ",  is_match: 1,  oref: this,  hdlr_1_2: this.hdlr_tmpl_if_1_2 },  { phrase: "<!--%TMPL_IF ",  is_match: 1,  oref: this,  hdlr_1_2: this.hdlr_tmpl_if_1_2 },  { phrase: "<%/TMPL_IF%>",  is_match: 1,  oref: this,  hdlr_1_2: this.hdlr_tmpl_if_1_2_end },  { phrase: "&lt;%/TMPL_IF%&gt;",  is_match: 1,  oref: this,  hdlr_1_2: this.hdlr_tmpl_if_1_2_end },  { phrase: "&LT;%/TMPL_IF%&GT;",  is_match: 1,  oref: this,  hdlr_1_2: this.hdlr_tmpl_if_1_2_end },  { phrase: "<!--%/TMPL_IF%-->",  is_match: 1,  oref: this,  hdlr_1_2: this.hdlr_tmpl_if_1_2_end },  { phrase: "<%TMPL_UNLESS ",  is_match: 1,  oref: this,  hdlr_1_2: this.hdlr_tmpl_unless_1_2 },  { phrase: "&lt;%TMPL_UNLESS ",  is_match: 1,  oref: this,  hdlr_1_2: this.hdlr_tmpl_unless_1_2 },  { phrase: "&LT;%TMPL_UNLESS ",  is_match: 1,  oref: this,  hdlr_1_2: this.hdlr_tmpl_unless_1_2 },  { phrase: "<!--%TMPL_UNLESS ",  is_match: 1,  oref: this,  hdlr_1_2: this.hdlr_tmpl_unless_1_2 },  { phrase: "<%/TMPL_UNLESS%>",  is_match: 1,  oref: this,  hdlr_1_2: this.hdlr_tmpl_if_1_2_end },  { phrase: "&lt;%/TMPL_UNLESS%&gt;",  is_match: 1,  oref: this,  hdlr_1_2: this.hdlr_tmpl_if_1_2_end },  { phrase: "&LT;%/TMPL_UNLESS%&GT;",  is_match: 1,  oref: this,  hdlr_1_2: this.hdlr_tmpl_if_1_2_end },  { phrase: "<!--%/TMPL_UNLESS%-->",  is_match: 1,  oref: this,  hdlr_1_2: this.hdlr_tmpl_if_1_2_end },  { phrase: "<%TMPL_ELSE%>",  is_match: 1,  oref: this,  hdlr_1_2: this.hdlr_tmpl_if_1_2_else },  { phrase: "&lt;%TMPL_ELSE%&gt;",  is_match: 1,  oref: this,  hdlr_1_2: this.hdlr_tmpl_if_1_2_else },  { phrase: "&LT;%TMPL_ELSE%&GT;",  is_match: 1,  oref: this,  hdlr_1_2: this.hdlr_tmpl_if_1_2_else },  { phrase: "<!--%TMPL_ELSE%-->",  is_match: 1,  oref: this,  hdlr_1_2: this.hdlr_tmpl_if_1_2_else } ]];  if ( typeof(tmpl) === "undefined" ) {  this.tmpl.str = "";  } else if ( typeof(tmpl) === "string" ) {  this.tmpl.str = tmpl;  } else if ( typeof(tmpl) === "object" ) {  this.tmpl.str = tmpl.innerHTML;  }  this.tmpl.data_cur = [ this.tmpl.data ];   this.p.ph_case_sensitive = 1;  this.p.global_vars = 0;  this.p.loop_context_vars = 0;  this.p.tmpl_is_commented = 0;  this.p.err_on_no_data = 0;  if ( prms != undefined ) {  if ( prms.ph_case_sensitive != undefined )  this.p.ph_case_sensitive = prms.ph_case_sensitive;  if ( prms.global_vars != undefined )  this.p.global_vars = prms.global_vars;  if ( prms.loop_context_vars != undefined )  this.p.loop_context_vars = prms.loop_context_vars;  if ( prms.tmpl_is_commented != undefined ) {  this.p.tmpl_is_commented = prms.tmpl_is_commented;    this.phrases.unshift([ { phrase: "<!--",  is_match: 1,  oref: this,  hdlr_1_2: this.hdlr_enclosing_comment_start } ]);  }  if ( prms.err_on_no_data != undefined )  this.p.err_on_no_data = prms.err_on_no_data;  if ( prms.wrap_in != undefined )  this.tmpl.str = "<" + prms.wrap_in + ">" + this.tmpl.str +  "</" + prms.wrap_in + ">";  }      this.hdlrs = [{ hdlr_0_1: this.def_hdlr_0_1,  hdlr_1_0: this.def_hdlr_1_0,  hdlr_1_2: this.def_hdlr_1_2 }];   this._match_reset();   this.tmpl_prepare(); }  ; htmltmpl.prototype._match_reset = function () {  var i;      this.match.state = 0;    this.match.ph_chr_idx = 0;  this.match.phrase_idx = -1;  this.match.str = new String();  this.match.phrases_cnt = this.phrases[0].length;  for(i = 0; i < this.phrases[0].length; i++)  this.phrases[0][i].is_match = 1; }  ; htmltmpl.prototype.set_state = function (newstate) {  var oldstate = this.match.state;    this.match.state = newstate;  switch (oldstate) {  case 0:  switch (this.match.state) {  case 0:  if ( typeof(this.hdlrs[0].hdlr_0_0) === "function" )  this.hdlrs[0].hdlr_0_0.call(this);  else  this.def_hdlr_0_0();  break;  case 1:  if ( typeof(this.hdlrs[0].hdlr_0_1) === "function" )  this.hdlrs[0].hdlr_0_1.call(this);  else  this.def_hdlr_0_1();  break;  case 2:  if ( typeof(this.hdlrs[0].hdlr_0_2) === "function" )  this.hdlrs[0].hdlr_0_2.call(this);  else  this.def_hdlr_0_2();  return;  }  break;  case 1:  switch (this.match.state) {  case 0:  if ( typeof(this.hdlrs[0].hdlr_1_0) === "function" )  this.hdlrs[0].hdlr_1_0.call(this);  else  this.def_hdlr_1_0();  break;  case 2:  if ( typeof(this.hdlrs[0].hdlr_1_2) === "function" )  this.hdlrs[0].hdlr_1_2.call(this);  else  this.def_hdlr_1_2();  break;  }  break;  case 2:  } }  ; htmltmpl.prototype.phrases_match = function (char) {  var i;  var chr;    if ( this.p.ph_case_sensitive )  chr = char;  else  chr = char.toUpperCase();     for(i = 0; i < this.phrases[0].length; i++) {  if ( ! this.phrases[0][i].is_match )  continue;  if ( this.phrases[0][i].phrase.charAt(this.match.ph_chr_idx) != chr ) {  this.phrases[0][i].is_match = 0;  this.match.phrases_cnt--;  } else {  if ( this.phrases[0][i].phrase.length == (this.match.ph_chr_idx + 1) ) {  this.match.phrase_idx = i;  this.match.str += char;  return 2;  }  }  }  if ( this.match.phrases_cnt ) {  this.match.ph_chr_idx++;  this.match.str += char;  return 1;  } else {  return 0;  } }  ; htmltmpl.prototype.tmpl_prepare = function() {  var str;  var out_el;    this.out_str = new String();   for (;  this.tmpl.pos.cur < this.tmpl.str.length;  this.tmpl.pos.cur++ ) {  switch (this.match.state) {  case 0:  res = this.phrases_match(this.tmpl.str.charAt(this.tmpl.pos.cur));  this.set_state(res);  break;  case 1:  res = this.phrases_match(this.tmpl.str.charAt(this.tmpl.pos.cur));  this.set_state(res);  break;  case 2:  break;  case -1:  return;  }  }     this.out_str += this.tmpl.str.substring(this.tmpl.pos.start, this.tmpl.pos.cur);  this.tmpl.data_cur[0].push({ type: "text",  data: this.out_str }); }  ; htmltmpl.prototype._find_data_by_name = function(name, data) {  var len;  var j;    if (( data == undefined ) ||  ( typeof(data) !== "object" ) ||  ( ! (data instanceof Array) ))  return;   if ( this.p.global_vars )  len = data.length;  else  len = 1;   for(j = 0; j < len; j++) {  if ( data[j][name] != undefined )  return data[j][name];  }   return; }  ; htmltmpl.prototype.set_loop_context_vars = function (data, loopidx, looplen) {    data[0].__first__ = 0;  data[0].__last__ = 0;  data[0].__inner__ = 0;  data[0].__outer__ = 0;     if ( loopidx == 0 ) {  data[0].__first__ = 1;  data[0].__outer__ = 1;  }  if ( loopidx == (looplen - 1) ) {  data[0].__last__ = 1;  data[0].__outer__ = 1;  }   if ( ! data[0].__outer__ )  data[0].__inner__ = 1;   if ( (loopidx + 1) % 2 == 0 ) {  data[0].__odd__ = 0;  data[0].__even__ = 1;  } else {  data[0].__odd__ = 1;  data[0].__even__ = 0;  }   data[0].__index__ = loopidx;  data[0].__counter__ = loopidx + 1; }  ; htmltmpl.prototype._apply = function(tmpl, data) {  var i, j;  var found_d;    for(i = 0; i < tmpl.length; i++) {  switch (tmpl[i].type) {  case "text":  this.out_str += tmpl[i].data;  break;  case "var":  found_d = this._find_data_by_name(tmpl[i].name, data);   if ( found_d != undefined )  this.out_str += found_d;  else if ( tmpl[i].default != undefined )  this.out_str += tmpl[i].default;  else if ( this.p.err_on_no_data ) {  this.err_msg = "Cann't find var '" + tmpl[i].name + "'.";  return 0;  }  break;  case "loop":  found_d = this._find_data_by_name(tmpl[i].name, data);   if (( found_d != undefined ) &&  ( typeof(found_d) === "object" ) &&  ( found_d instanceof Array )) {  for(j = 0; j < found_d.length; j++) {  data.unshift(found_d[j]);  if ( this.p.loop_context_vars )  this.set_loop_context_vars(data, j, found_d.length);  if ( ! this._apply(tmpl[i].data, data) )  return 0;  data.shift();  }  } else if ( this.p.err_on_no_data ) {  this.err_msg = "Cann't find loop '" + tmpl[i].name + "'.";  return 0;  }   break;  case "if":  found_d = this._find_data_by_name(tmpl[i].name, data);   if (( found_d == undefined ) && ( this.p.err_on_no_data )) {  this.err_msg = "Cann't find bool var '" + tmpl[i].name + "'.";  return 0;  }   if ( found_d ) {  if ( ! this._apply(tmpl[i].data, data) )  return 0;  } else {  if ( ! this._apply(tmpl[i].else_data, data) )  return 0;  }  break;  case "unless":  found_d = this._find_data_by_name(tmpl[i].name, data);   if (( found_d == undefined ) && ( this.p.err_on_no_data )) {  this.err_msg = "Cann't find bool var '" + tmpl[i].name + "'.";  return 0;  }   if ( ! found_d ) {  if ( ! this._apply(tmpl[i].data, data) )  return 0;  } else {  if ( ! this._apply(tmpl[i].else_data, data) )  return 0;  }  break;  }  }   return 1; }  ; htmltmpl.prototype.apply = function(data) {  var str;  var out_el;  var i;    this.out_str = new String();   if ( ! this._apply(this.tmpl.data, [ data ]) )  return;   out_el = $.parseHTML(this.out_str);   if ( out_el.length == 1 )  return out_el[0];  else  return out_el; }    ; htmltmpl.prototype.def_hdlr_0_0 = function () {   this._match_reset(); }  ; htmltmpl.prototype.def_hdlr_0_1 = function () {   this.out_str += this.tmpl.str.substring(this.tmpl.pos.start, this.tmpl.pos.cur); }  ; htmltmpl.prototype.def_hdlr_1_0 = function () {    this.tmpl.pos.start = this.tmpl.pos.cur;   this.out_str += this.match.str;  this._match_reset(); }  ; htmltmpl.prototype.def_hdlr_1_2 = function () {  if ( this.out_str != "" ) {  this.tmpl.data_cur[0].push({ type: "text",  data: this.out_str });  this.out_str = new String();  }     if ( typeof(this.phrases[0][this.match.phrase_idx].hdlr_1_2) === "function" )  this.phrases[0][this.match.phrase_idx].hdlr_1_2.call(this); }  ; htmltmpl.prototype.def_hdlr_0_2 = function () {  if ( this.out_str != "" ) {  this.tmpl.data_cur[0].push({ type: "text",  data: this.out_str });  this.out_str = new String();  }     if ( typeof(this.phrases[0][this.match.phrase_idx].hdlr_0_2) === "function" )  this.phrases[0][this.match.phrase_idx].hdlr_0_2.call(this); }     ; htmltmpl.prototype.hdlr_enclosing_comment_start = function () {   this.phrases.shift();  this.phrases[0].unshift({ phrase: "-->",  is_match: 1,  oref: this,  hdlr_1_2: this.hdlr_enclosing_comment_end });  this.tmpl.pos.start = this.tmpl.pos.cur + 1;   this._match_reset(); }  ; htmltmpl.prototype.hdlr_enclosing_comment_end = function () {    this.tmpl.pos.start = this.tmpl.pos.cur + 1;   this._match_reset(); }       ; htmltmpl.prototype.hdlr_tag = function (tag, attrs, cb) {  var phrases = [];  var i;     for(i = 0; i < attrs.length; i++) {  phrases.push({ phrase: attrs[i] + "=",  is_match: 1,  oref: this,  hdlr_1_2: this._hdlr_tag });  }  this.priv.unshift({ attrs: {},  ph_attrs: phrases,  ph_tag_stops: [ { phrase: "%>",  is_match: 1,  oref: this,  hdlr_1_2: this._hdlr_tag_end },  { phrase: "%&gt;",  is_match: 1,  oref: this,  hdlr_1_2: this._hdlr_tag_end },  { phrase: "%&GT;",  is_match: 1,  oref: this,  hdlr_1_2: this._hdlr_tag_end },  { phrase: "%-->",  is_match: 1,  oref: this,  hdlr_1_2: this._hdlr_tag_end } ],  cb: cb,  attr_name: "",  is_quoted: 0,  tag: tag,  tokens: new String() });   this.phrases.unshift(phrases);   this.hdlrs.unshift({ hdlr_0_0: this._hdlr_tag_0_0,  hdlr_0_1: this._hdlr_tag_0_1,  hdlr_1_0: this._hdlr_tag_1_0 });   this.tmpl.pos.start = this.tmpl.pos.cur + 1;   this._match_reset(); }  ; htmltmpl.prototype._hdlr_tag = function () {  var ph_sp_q = [ { phrase: " ",  is_match: 1,  oref: this,  hdlr_0_2: function () {  this._hdlr_tag_0_2(this._hdlr_tag);  } },  { phrase: "\"",  is_match: 1,  oref: this,  hdlr_0_2: this._hdlr_tag_quote },  { phrase: "'",  is_match: 1,  oref: this,  hdlr_0_2: this._hdlr_tag_quote } ];      this.hdlrs.shift();  this.phrases.shift();   if ( this.priv[0].is_quoted ) {  this.phrases.unshift(this.priv[0].ph_attrs.concat(this.priv[0].ph_tag_stops));   this.hdlrs.unshift({ hdlr_0_0: this._hdlr_tag_0_0,  hdlr_0_1: this._hdlr_tag_0_1,  hdlr_1_0: this._hdlr_tag_1_0 });  this.priv[0].is_quoted = 0;  } else if ( this.priv[0].attr_name != "" ) {  this.phrases.unshift(this.priv[0].ph_attrs);   this.hdlrs.unshift({ hdlr_0_0: this._hdlr_tag_0_0,  hdlr_0_1: this._hdlr_tag_0_1,  hdlr_1_0: this._hdlr_tag_1_0 });  } else {  this.phrases.unshift(this.priv[0].ph_tag_stops.concat(ph_sp_q));   this.hdlrs.unshift({ hdlr_0_1: this._hdlr_tag_0_1,  hdlr_1_0: this._hdlr_tag_1_0 });  }    if ( this.priv[0].attr_name == "" ) {  this.priv[0].attr_name = this.tmpl.str.substring(this.tmpl.pos.start,  this.tmpl.pos.cur).toLowerCase();    this.priv[0].ph_attrs.splice(this.match.phrase_idx, 1);  } else {    this.priv[0].attrs[this.priv[0].attr_name] = this.priv[0].tokens;  this.priv[0].attr_name = "";  }   this.priv[0].tokens = new String();  this.tmpl.pos.start = this.tmpl.pos.cur + 1;   this._match_reset(); }  ; htmltmpl.prototype._hdlr_tag_0_0 = function () {    this.tmpl.pos.start = this.tmpl.pos.cur + 1;   this._match_reset(); }  ; htmltmpl.prototype._hdlr_tag_0_1 = function () {  this.priv[0].tokens += this.tmpl.str.substring(this.tmpl.pos.start, this.tmpl.pos.cur);  }  ; htmltmpl.prototype._hdlr_tag_0_2 = function (func) {  this.priv[0].tokens += this.tmpl.str.substring(this.tmpl.pos.start, this.tmpl.pos.cur);     func.call(this); }  ; htmltmpl.prototype._hdlr_tag_1_0 = function () {  this.tmpl.pos.start = this.tmpl.pos.cur;  this.priv[0].tokens += this.match.str;  }  ; htmltmpl.prototype._hdlr_tag_quote = function () {  var ph;        if ( this.match.ph_chr_idx == 0 ) {  this.priv[0].is_quoted = 1;   ph = this.phrases[0][this.match.phrase_idx].phrase;  this.phrases.shift();  this.phrases.unshift([ { phrase: ph,  is_match: 1,  oref: this,  hdlr_0_2: function () {  this._hdlr_tag_0_2(this._hdlr_tag);  } } ]);   this.tmpl.pos.start = this.tmpl.pos.cur + 1;  this._match_reset();  } else {  this.phrases[0].splice(this.match.phrase_idx, 1);  } }  ; htmltmpl.prototype._hdlr_tag_end = function () {      this.priv[0].attrs[this.priv[0].attr_name] = this.priv[0].tokens;   this.priv[0].cb.call(this);   this.tmpl.pos.start = this.tmpl.pos.cur + 1;   this.priv.shift();  this.phrases.shift();  this.hdlrs.shift();   this._match_reset(); }     ; htmltmpl.prototype.hdlr_tmpl_var_1_2 = function () {   this.hdlr_tag("var", ["NAME", "DEFAULT"], this.hdlr_tmpl_var_1_2_tail); }  ; htmltmpl.prototype.hdlr_tmpl_var_1_2_tail = function () {   var i;  var len;  var name_is_found = 0;    this.tmpl.data_cur[0].push({ type: "var",  name: this.priv[0].attrs.name,  default: this.priv[0].attrs.default }); }    ; htmltmpl.prototype.hdlr_tmpl_loop_1_2 = function () {   this.hdlr_tag("loop", ["NAME"], this.hdlr_tmpl_loop_1_2_tail); }  ; htmltmpl.prototype.hdlr_tmpl_loop_1_2_tail = function () {  var loop;      loop = { type: "loop",  name: this.priv[0].attrs.name,  data: [] };   this.tmpl.data_cur[0].push(loop);  this.tmpl.data_cur.unshift(loop.data);     this.priv.unshift(this.priv[0]); }  ; htmltmpl.prototype.hdlr_tmpl_loop_1_2_end = function () {  var pcur, pstart;      this.tmpl.data_cur.shift();  this.priv.shift();   this.tmpl.pos.start = this.tmpl.pos.cur + 1;  this._match_reset(); }    ; htmltmpl.prototype.hdlr_tmpl_if_1_2 = function () {   this.hdlr_tag("if", ["NAME"], this.hdlr_tmpl_if_1_2_tail); }  ; htmltmpl.prototype.hdlr_tmpl_unless_1_2 = function () {   this.hdlr_tag("unless", ["NAME"], this.hdlr_tmpl_if_1_2_tail); }  ; htmltmpl.prototype.hdlr_tmpl_if_1_2_tail = function () {  var if_;  var varname;  var i;  var len;  var phrase;  var name_is_found = 0;      if_ = { type: this.priv[0].tag,  name: this.priv[0].attrs.name,  data: [],  else_data: [] };   this.tmpl.data_cur[0].push(if_);  this.tmpl.data_cur.unshift(if_.data);     this.priv.unshift(this.priv[0]); }  ; htmltmpl.prototype.hdlr_tmpl_if_1_2_else = function () {  var phrase;  var len;      this.tmpl.data_cur.shift();  len = this.tmpl.data_cur[0].length;  this.tmpl.data_cur.unshift(this.tmpl.data_cur[0][len - 1].else_data);  this.tmpl.pos.start = this.tmpl.pos.cur + 1;   this._match_reset(); }  ; htmltmpl.prototype.hdlr_tmpl_if_1_2_end = function () {    this.tmpl.data_cur.shift();  this.priv.shift();  this.tmpl.pos.start = this.tmpl.pos.cur + 1;  this._match_reset(); }  } 